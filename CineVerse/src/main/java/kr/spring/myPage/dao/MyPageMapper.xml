<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper   
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.spring.myPage.dao.MyPageMapper">
	<!-- 쿠폰 목록 -->
	<select id="selectMemCouponList" parameterType="long">
		SELECT mc.*, c.*,
		ADD_MONTHS(mc.coupon_regdate, 1) coupon_enddate
		FROM member_coupon mc
		JOIN coupon_db c ON mc.coupon_num = c.coupon_num
		WHERE mc.mem_num =
		#{mem_num}
	</select>

	<sql id="myPageBoardSearch">
		<if test="cb_type != null and cb_type != ''">
			AND cb_type = #{cb_type}
		</if>
		<if test="category == 1">
			AND cb_type = 'movieTalk'
		</if>
		<if test="category == 2">
			AND cb_type = 'dailyTalk'
		</if>
	</sql>

	<sql id="aBoardSearch">
		<if test="ab_type != null and ab_type != ''">
			AND ab_type = #{ab_type}
		</if>
		<if test="categoty == 1">
			AND ab_type = 'handover'
		</if>
		<if test="categoty == 2">
			AND ab_type = 'exchange'
		</if>
	</sql>
	<sql id="consultSearch">
		<if test="consult_type !=null and consult_type != ''">
			AND consult_type = #{consult_type}
		</if>
		<if test="category == 1">
			AND consult_type = 'inquiry'
		</if>
		<if test="category == 2">
			AND consult_type = 'dissatisfaction'
		</if>
		<if test="category == 3">
			AND consult_type = 'compliment'
		</if>
		<if test="category == 4">
			AND consult_type = 'proposal'
		</if>
		<if test="category == 5">
			AND consult_type = 'missing'
		</if>
		<if test="category == 6">
			AND consult_type = 'exchange'
		</if>
	</sql>


	<!-- 문의 갯수 -->
	<select id="consultcnt" parameterType="map" resultType="integer">
		SELECT
		COUNT(*) FROM consult WHERE mem_num=#{mem_num}
	</select>

	<!-- 문의 목록 -->
	<select id="consultList" parameterType="map"
		resultType="consultVO">
		SELECT * FROM consult WHERE mem_num=#{mem_num}
		<include refid="consultSearch"></include>
		ORDER BY consult_num DESC
	</select>


	<!-- 커뮤 좋아요 수 -->
	<select id="cBoardWriteFavCnt" parameterType="map"
		resultType="integer">
		SELECT COUNT(*) FROM community_fav cf JOIN community_board cb
		USING(cb_num)
		WHERE cf.mem_num=#{mem_num}
		<include refid="myPageBoardSearch"></include>
	</select>

	<!-- 커뮤 좋아요 목록 -->
	<select id="cBoardWriteFavList" parameterType="map"
		resultType="boardFavVO">
		SELECT
		cb_num,
			<![CDATA[
			REPLACE(REPLACE(cb_title,'<','&lt;'),'>','&gt;') cb_title,
			]]>
		cb_reg_date,
		cb_type,
		fav_cnt
		FROM community_board cb JOIN community_fav
		cf USING(cb_num)
		LEFT OUTER
		JOIN (SELECT COUNT(*) fav_cnt, cb_num FROM
		community_fav
		GROUP BY
		cb_num)
		USING(cb_num) WHERE cf.mem_num=#{mem_num}
		<include refid="myPageBoardSearch"></include>
	</select>

	<!-- 커뮤 북마크 수 -->
	<select id="cBoardBookMark" parameterType="map"
		resultType="integer">
		SELECT COUNT(*)
		FROM community_bookmark cb JOIN community_board cc
		USING(cb_num)
		WHERE cb.mem_num=#{mem_num}
		<include refid="myPageBoardSearch"></include>
	</select>

	<!-- 커뮤 북마크 목록 -->
	<select id="cBoardBookMarkList" parameterType="map"
		resultType="boardVO">
		SELECT
		cb_num,
			<![CDATA[
			REPLACE(REPLACE(cb_title,'<','&lt;'),'>','&gt;') cb_title,
			]]>
		cb_reg_date,
		cb_type,
		fav_cnt
		FROM community_bookmark cb JOIN
		community_board cbb
		USING(cb_num)
		LEFT
		OUTER JOIN (SELECT COUNT(*)
		fav_cnt, cb_num FROM
		community_fav GROUP
		BY
		cb_num) USING(cb_num)
		WHERE
		cb.mem_num=#{mem_num}
		<include refid="myPageBoardSearch"></include>
	</select>

	<!-- 게시글 수 -->
	<select id="cBoardWriteListcnt" parameterType="map"
		resultType="integer">
		SELECT COUNT(*)
		FROM community_board
		WHERE mem_num = #{mem_num}
		<include refid="myPageBoardSearch"></include>
	</select>

	<!-- 게시글 목록 -->
	<select id="selectMemcBoardWriteList" parameterType="map"
		resultType="boardVO">
		SELECT
		cb_num,
			<![CDATA[
			REPLACE(REPLACE(cb_title,'<','&lt;'),'>','&gt;') cb_title,
			]]>
		cb_reg_date,
		cb_type,
		fav_cnt
		FROM community_board
		LEFT OUTER JOIN (SELECT
		COUNT(*) fav_cnt,
		cb_num
		FROM community_fav GROUP
		BY cb_num)
		USING(cb_num)
		WHERE mem_num
		=#{mem_num}
		<include refid="myPageBoardSearch"></include>
		ORDER BY cb_num DESC
	</select>

	<!-- 댓글 수 -->
	<select id="cBoardReplyListcnt" parameterType="map"
		resultType="integer">
		SELECT COUNT(*)
		FROM community_comment cc
		JOIN community_board cb ON
		cc.cb_num = cb.cb_num
		WHERE cc.mem_num = #{mem_num}
		<include refid="myPageBoardSearch"></include>
	</select>


	<!-- 댓글 목록 -->
	<select id="cBoardReplyList" parameterType="map"
		resultType="boardCommentVO">
		SELECT
		cc.cc_num,
			<![CDATA[
			REPLACE(REPLACE(cc.cc_content,'<','&lt;'),'>','&gt;') AS cc_content,
			]]>
		cc.cc_reg_date,
		cc.cc_modify_date,
		fav_data.fav_cnt,
			<![CDATA[
			REPLACE(REPLACE(cb.cb_title,'<','&lt;'),'>','&gt;') AS cb_title,
			]]>
		cb.cb_type,
		cb.cb_num
		FROM
		community_comment cc
		LEFT OUTER JOIN (SELECT
		COUNT(*) AS
		fav_cnt,
		cc_num FROM
		community_comment_fav GROUP BY cc_num)
		fav_data
		ON
		cc.cc_num
		= fav_data.cc_num
		JOIN community_board cb ON
		cc.cb_num =
		cb.cb_num
		WHERE
		cc.mem_num = #{mem_num}
		<include refid="myPageBoardSearch"></include>
		ORDER BY cc.cc_num DESC
	</select>


	<!-- 대댓글 수 -->
	<select id="cBoardResponsecnt" parameterType="map"
		resultType="integer">
		SELECT COUNT(*)
		FROM community_response cr
		JOIN
		community_comment cc ON
		cr.cc_num = cc.cc_num
		WHERE cr.mem_num =
		#{mem_num}
	</select>
	<!-- 대댓글 목록 -->
	<select id="cBoardResponseList" parameterType="map"
		resultType="boardCommentVO">
		SELECT
		cr.te_num,
        <![CDATA[
        REPLACE(REPLACE(cr.te_content,'<','&lt;'),'>','&gt;') AS te_content,
        ]]>
		cr.te_date,
		cr.te_mdate,
		fav_data.fav_cnt,
		cb.cb_type,
		<![CDATA[
        REPLACE(REPLACE(cb.cb_title,'<','&lt;'),'>','&gt;') AS cb_title,
        ]]>
		cb.cb_num
		FROM community_response cr
		LEFT JOIN (
		SELECT te_num, COUNT(*)
		AS fav_cnt
		FROM community_response_fav
		GROUP BY te_num
		) fav_data ON
		cr.te_num = fav_data.te_num
		LEFT JOIN (
		SELECT cc.cc_num, cb.cb_type,
		cb.cb_title, cb.cb_num
		FROM community_comment cc
		JOIN community_board cb
		ON cc.cb_num = cb.cb_num
		) cb ON cr.cc_num = cb.cc_num
		WHERE cr.mem_num
		= #{mem_num}
		<include refid="myPageBoardSearch" />
		ORDER BY cr.te_num DESC
	</select>

	<!-- 양도/교환 찜 -->
	<select id="aBoardBookMark" parameterType="map"
		resultType="integer">
		SELECT COUNT(*) FROM ab_bookmark ab JOIN assignment_board aa
		USING(ab_num)
		WHERE ab.mem_num=${mem_num}
		<include refid="aBoardSearch"></include>
		ORDER BY ab_num DESC
	</select>

	<select id="aBoardBookMarkList" parameterType="map"
		resultType="assignVO">
		SELECT * FROM ab_bookmark ab JOIN assignment_board
		USING(ab_num) LEFT
		OUTER JOIN (SELECT COUNT(*) fav_cnt, ab_num FROM ab_bookmark
		GROUP BY
		ab_num)
		USING(ab_num) WHERE ab.mem_num = #{mem_num}
		<include refid="aBoardSearch"></include>
	</select>

	<!-- 양도/교환 게시글 수 -->
	<select id="aBoardListcnt" parameterType="map"
		resultType="integer">
		SELECT COUNT(*)
		FROM assignment_board
		WHERE mem_num=#{mem_num}
		<include refid="aBoardSearch"></include>
		ORDER BY ab_num DESC
	</select>

	<!-- 양도/교환 게시글 목록 -->
	<select id="aBoardList" parameterType="map"
		resultType="assignVO">
		SELECT *
		FROM assignment_board
		LEFT OUTER JOIN (SELECT COUNT(*)
		fav_cnt,ab_num FROM ab_bookmark GROUP BY
		ab_num) USING(ab_num)
		WHERE
		mem_num=#{mem_num}
		<include refid="aBoardSearch"></include>
		ORDER BY ab_num DESC
	</select>

	<!-- 이벤트 갯수 -->
	<select id="eventcnt" parameterType="map" resultType="integer">
		SELECT
		COUNT(*) FROM event_participation WHERE mem_num=#{mem_num}
	</select>

	<!-- 이벤트 목록 -->
	<select id="eventList" parameterType="map" resultType="EventVO">
		SELECT *
		FROM event_participation ep JOIN event e ON ep.event_num=e.event_num
		WHERE mem_num=#{mem_num}
	</select>

	<update id="updateMember_detail" parameterType="myPageVO">
		UPDATE
		member_detail
		SET
		mem_name=#{mem_name},
		mem_nickName=#{mem_nickName},
		mem_phone=#{mem_phone},
		mem_email=#{mem_email},
		mem_modify_date =
		SYSDATE
		WHERE mem_num = #{mem_num}
	</update>
	<!-- 예매 목록 -->
	<select id="reservationList" parameterType="long"
		resultType="movieBookingVO">
		WITH RankedBookings AS (
		SELECT
		mb.user_mb_num,
		mb.mb_num,
		mb.m_code,
		mb.mt_num,
		mb.mb_price,
		mt.th_num,
		c.c_branch,
		s.seat_num,
		mb.mem_num,
		m.m_name,
		t.th_name,
		mt.mt_date,
		m.m_filename,
		mt.mt_start,
		mt.mt_end,
		ROW_NUMBER() OVER (PARTITION BY mb.mb_num ORDER BY mb.m_code) AS rn
		FROM movie_booking mb
		INNER JOIN movie m ON mb.m_code = m.m_code
		INNER JOIN mb_detail mbd ON mb.mb_num = mbd.mb_num
		INNER JOIN movie_time mt ON mb.mt_num = mt.mt_num
		INNER JOIN theater t ON mt.th_num = t.th_num
		INNER JOIN cinema c ON t.c_num = c.c_num
		INNER JOIN seat s ON mbd.seat_num = s.seat_num
		WHERE mb.mem_num = #{mem_num}
		)
		SELECT
		user_mb_num,
		mb_num,
		m_code,
		mt_num,
		mb_price,
		th_num,
		c_branch,
		seat_num,
		mem_num,
		m_name,
		th_name,
		mt_date,
		m_filename,
		mt_start,
		mt_end
		FROM RankedBookings
		WHERE rn = 1
		ORDER BY mb_num DESC
	</select>

	<select id="lastRes" parameterType="long"
		resultType="movieBookingVO">
<![CDATA[
    WITH RankedBookings AS (
        SELECT
            mb.user_mb_num,
            mb.mb_num,
            mb.m_code,
            mb.mt_num,
            mb.mb_price,
            mt.th_num,
            c.c_branch,
            s.seat_num,
            mb.mem_num,
            m.m_name,
            t.th_name,
            mt.mt_date,
            m.m_filename,
            mt.mt_start,
            mt.mt_end,
            ROW_NUMBER() OVER (PARTITION BY mb.mb_num ORDER BY mt_start DESC) AS rn
        FROM movie_booking mb
        INNER JOIN movie m ON mb.m_code = m.m_code
        INNER JOIN mb_detail mbd ON mb.mb_num = mbd.mb_num
        INNER JOIN movie_time mt ON mb.mt_num = mt.mt_num
        INNER JOIN theater t ON mt.th_num = t.th_num
        INNER JOIN cinema c ON t.c_num = c.c_num
        INNER JOIN seat s ON mbd.seat_num = s.seat_num
        WHERE mb.mem_num = #{mem_num}
    ),
    DistinctBookings AS (
        SELECT
            user_mb_num,
            mb_num,
            m_code,
            mt_num,
            mb_price,
            th_num,
            c_branch,
            seat_num,
            mem_num,
            m_name,
            th_name,
            mt_date,
            m_filename,
            mt_start,
            mt_end,
            ROW_NUMBER() OVER (ORDER BY mb_num DESC, mt_start DESC) AS global_rn
        FROM RankedBookings
        WHERE rn = 1
    )
    SELECT
        user_mb_num,
        mb_num,
        m_code,
        mt_num,
        mb_price,
        th_num,
        c_branch,
        seat_num,
        mem_num,
        m_name,
        th_name,
        mt_date,
        m_filename,
        mt_start,
        mt_end
    FROM DistinctBookings
    WHERE global_rn <= 2
    ORDER BY mb_num DESC, mt_start DESC
    ]]>
	</select> 
</mapper>