<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper   
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">  
<mapper namespace="kr.spring.board.dao.BoardMapper">
	<insert id="insertBoard" parameterType="boardVO">
		INSERT INTO community_board (cb_num,cb_type,cb_title,cb_content,cb_filename,cb_ip,mem_num) 
				VALUES (community_board_seq.nextval,#{cb_type},#{cb_title},#{cb_content},#{cb_filename,jdbcType=VARCHAR},#{cb_ip},#{mem_num})
	</insert>
	
	<sql id="boardSearch">
		<where><!--조건-->
			<if test="cb_type != null and cb_type != ''">
				cb_type = #{cb_type}
			</if>
			<if test="keyword != null and keyword != ''">
				<if test="cb_type != null and cb_type != ''">
				AND
				</if>
				cb_title LIKE '%' || #{keyword} || '%' OR mem_id LIKE '%' || #{keyword} || '%'
				OR cb_content LIKE '%' || #{keyword} || '%' OR mem_nickname LIKE '%' || #{keyword} || '%'
			</if>
		</where>
	</sql>
	<sql id="boardOrder">
		<if test="order == 1">
			ORDER BY cb_num DESC
		</if>
		<if test="order == 2">
			ORDER BY cb_hit DESC
		</if>
		<if test="order == 3">
			ORDER BY fav_cnt DESC NULLS LAST
		</if>
		<if test="order == 4">
			ORDER BY cc_cnt DESC NULLS LAST
		</if>
	</sql>
	



	<!-- 게시판 글 총레코드수/검색 레코드수 -->
	<select id="selectRowCount" parameterType="map" resultType="integer">
		SELECT COUNT(*) FROM community_board JOIN member USING (mem_num) LEFT OUTER JOIN member_detail USING(mem_num)
		<include refid="boardSearch"></include>
	</select>

	<!-- 게시판 전체 목록/검색 목록 -->
	<select id="selectList" parameterType="map" resultType="boardVO">
		SELECT * FROM
				(SELECT a.*, rownum rnum FROM			<!--좋아요가 없을 때 누락-->
								(SELECT 
									cb_num,
									<![CDATA[
									REPLACE(REPLACE(cb_title,'<','&lt;'),'>','&gt;') cb_title,
									]]>
									cb_hit,
									cb_filename,
									cb_reg_date,
									mem_num,
									mem_id,
									mem_nickname,
									cc_cnt,
									fav_cnt
								
									FROM community_board 
									LEFT OUTER JOIN (SELECT COUNT(*) cc_cnt, cb_num FROM community_comment GROUP BY cb_num) USING (cb_num)
									LEFT OUTER JOIN (SELECT COUNT(*) fav_cnt, cb_num FROM community_fav GROUP BY cb_num) USING(cb_num)
												JOIN member USING(mem_num) LEFT OUTER JOIN member_detail USING(mem_num)
												<include refid="boardSearch"></include>
												<include refid="boardOrder"></include>
												)a) 
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>
	
	
	<!-- 게시판 글 수정 -->
	<update id="updateBoard" parameterType="boardVO">
		UPDATE community_board SET
						cb_type = #{cb_type}, cb_title = #{cb_title}, cb_content = #{cb_content}, cb_ip = #{cb_ip}, cb_modify_date = SYSDATE
												WHERE cb_num = #{cb_num}
	</update>
	
	<!-- 댓글 등록 -->
	<insert id="insertComment" parameterType="boardCommentVO">
		INSERT INTO community_comment (cc_num, cc_content, cc_ip, cb_num, mem_num)
								VALUES (community_comment_seq.nextval, #{cc_content}, #{cc_ip}, #{cb_num}, #{mem_num})
	</insert>
	
	<!-- 댓글 목록 -->
	<select id="selectListComment" parameterType="map" resultType="boardCommentVO">
         SELECT * FROM (SELECT a.*, rownum rnum FROM 
							(SELECT cc.cc_num,
									<![CDATA[
									REPLACE(REPLACE(cc.cc_content,'<','&lt;'),'>','&gt;') cc_content,
									]]> 
									cc.cc_reg_date, 
									cc.cc_modify_date, 
									cc.cb_num,
									m.mem_num,
									m.mem_id,
									md.mem_nickname,
									cf.click_num,
									cfc.refav_cnt,
									rc.resp_cnt,
									cr.cc_report
							FROM community_comment cc JOIN member m ON cc.mem_num=m.mem_num LEFT OUTER JOIN member_detail md ON m.mem_num=md.mem_num
							LEFT OUTER JOIN (SELECT cc_num, count(*) cc_report FROM comment_report GROUP BY cc_num)cr ON cc.cc_num=cr.cc_num
        				 	LEFT OUTER JOIN (SELECT cc_num, mem_num click_num FROM community_comment_fav WHERE mem_num=#{mem_num})cf ON cc.cc_num=cf.cc_num
        					LEFT OUTER JOIN (SELECT cc_num, COUNT(*) refav_cnt FROM community_comment_fav GROUP BY cc_num)cfc ON cc.cc_num=cfc.cc_num
         					LEFT OUTER JOIN (SELECT cc_num, COUNT(*) resp_cnt FROM community_response GROUP BY cc_num)rc ON cc.cc_num=rc.cc_num
        					WHERE cb_num=#{cb_num} ORDER BY cc_num ASC)a)
      <![CDATA[WHERE rnum >= #{start} AND rnum <= #{end}]]>
	</select>
	
	<!-- 답글 등록 -->
 	<insert id="insertResponse" parameterType="boardResponseVO">
 		INSERT INTO community_response(
 			te_num,
 			te_content,
 			te_parent_num,
 			te_depth,
 			te_ip,
 			cc_num,
 			mem_num)
 		VALUES (
 		    community_response_seq.nextval,
 			#{te_content},
 			#{te_parent_num},
 			#{te_depth},
 			#{te_ip},
 			#{cc_num},
 			#{mem_num})	
 	</insert>
 	
 	<!-- 답글 목록 -->
 	<!-- <select id="selectListResponse" parameterType="long" resultType="boardResponseVO">
 		
	SELECT
 			r.te_num,
 			r.te_content,
 			r.mem_num,
 			a.mem_id,
 			d.mem_nickname,
 			r.te_date,
 			r.te_mdate,
 			r.te_ip,
 			r.cc_num,
 			r.te_depth,
 			r.te_parent_num,
 			m.mem_id parent_id,
 			p.mem_nickname pnick_name,
 			z.click_num,
 			x.respfav_cnt
 		FROM community_response r JOIN member a ON r.mem_num=a.mem_num
        LEFT OUTER JOIN member_detail d ON a.mem_num=d.mem_num
        	RIGHT OUTER JOIN (SELECT te_num, mem_num click_num FROM community_response_fav WHERE mem_num=#{mem_num})z ON z.te_num=r.te_num
        	RIGHT OUTER JOIN (SELECT te_num, COUNT(*) respfav_cnt FROM community_response_fav GROUP BY te_num)x ON x.te_num=r.te_num
 		LEFT OUTER JOIN community_response s ON r.te_parent_num=s.te_num
 		LEFT OUTER JOIN member m ON s.mem_num=m.mem_num
        LEFT OUTER JOIN member_detail p ON s.mem_num=p.mem_num
 		WHERE r.cc_num=#{cc_num}
 		START WITH r.te_depth=0 CONNECT BY PRIOR r.te_num=r.te_parent_num ORDER SIBLINGS BY r.te_num DESC
 	</select>  -->
 	<select id="selectListResponse" parameterType="map" resultType="boardResponseVO">
	SELECT 
	r.te_num, 
	r.te_content, 
	r.mem_num, 
	a.mem_id, 
	b.mem_nickname,
	r.te_date,
	 r.te_mdate, 
	 r.te_ip, 
	 r.cc_num,
	 r.te_depth, 
	 r.te_parent_num, 
	 n.mem_id parent_id, 
	m.mem_nickname pnick_name, 
	rf.respclick_num, 
	rn.respfav_cnt,
	rr.rr_report
	
	FROM community_response r
	JOIN member a ON r.mem_num = a.mem_num
	LEFT JOIN member_detail b ON r.mem_num = b.mem_num
	LEFT JOIN community_response s ON r.te_parent_num = s.te_num
	
	LEFT OUTER JOIN (SELECT te_num, mem_num respclick_num FROM community_response_fav WHERE mem_num=#{mem_num})rf ON r.te_num = rf.te_num
    LEFT OUTER JOIN (SELECT te_num, COUNT(*) respfav_cnt FROM community_response_fav GROUP BY te_num)rn ON r.te_num = rn.te_num
	
	LEFT OUTER JOIN (SELECT te_num, COUNT(*) rr_report FROM response_report GROUP BY te_num)rr ON r.te_num=rr.te_num
	
	LEFT JOIN member_detail m ON s.mem_num = m.mem_num
	LEFT JOIN member n ON s.mem_num = n.mem_num
	WHERE r.cc_num = #{cc_num}
	
	START WITH r.te_depth = 0
	CONNECT BY PRIOR r.te_num = r.te_parent_num
	ORDER SIBLINGS BY r.te_num ASC
 	</select> 
 	
 	<!-- 답글 삭제 - 자식답글까지-->
 	<delete id="deleteResponse" parameterType="long">
 		DELETE FROM community_response WHERE te_num IN (
 			SELECT te_num
 			FROM community_response
 			START WITH te_num=#{te_num}
 			CONNECT BY PRIOR te_num = te_parent_num
 		)
 	</delete>
 	
 	<!-- 답글 삭제 전 답글 좋아요 및 자식답글 좋아요 삭제-->
 	<delete id="deleteRespFavByTeNum" parameterType="long">
 		DELETE FROM community_response_fav WHERE te_num IN (
 					SELECT te_num FROM community_response WHERE te_num IN (
								 			SELECT te_num
								 			FROM community_response
								 			START WITH te_num=#{te_num}
								 			CONNECT BY PRIOR te_num = te_parent_num
								 		))
 	</delete>
 	

 	
 	
 	<!-- 게시글 답글수 -->
 	<select id="selectResponseCountByCbNum" parameterType="long">
 		SELECT 
	count(r.te_content) resp_cnt
	
	FROM community_response r
	JOIN member a ON r.mem_num = a.mem_num
	LEFT JOIN member_detail b ON r.mem_num = b.mem_num
	LEFT JOIN community_response s ON r.te_parent_num = s.te_num
	LEFT JOIN member_detail m ON s.mem_num = m.mem_num
	LEFT JOIN member n ON s.mem_num = n.mem_num
	WHERE r.cc_num in (select cc_num from community_comment where cb_num=#{cb_num})
	
	START WITH r.te_depth = 0
	CONNECT BY PRIOR r.te_num = r.te_parent_num
	ORDER SIBLINGS BY r.te_num ASC
 	</select>
 	
 	
 	<!-- 부모글 신고 -->
	<insert id="boardReport" parameterType="boardReportVO">
		INSERT INTO community_report (br_num, br_content, br_category, mem_num, cb_num) 
				VALUES (community_report_seq.nextval, #{br_content}, #{br_category, jdbcType=INTEGER}, #{mem_num}, #{cb_num})
	</insert>
	
	<!-- 댓글 신고 -->
	<insert id="commentReport" parameterType="commentReportVO">
		INSERT INTO comment_report (cr_num, cr_content, cr_category, mem_num, cc_num) 
				VALUES (comment_report_seq.nextval, #{cr_content}, #{cr_category, jdbcType=INTEGER}, #{mem_num}, #{cc_num})
	</insert>
	
	<!-- 답글 신고 -->
	<insert id="responseReport" parameterType="responseReportVO">
		INSERT INTO response_report (rr_num, rr_content, rr_category, mem_num, te_num) 
				VALUES (response_report_seq.nextval, #{rr_content}, #{rr_category, jdbcType=INTEGER}, #{mem_num}, #{te_num})
	</insert>
</mapper>							






