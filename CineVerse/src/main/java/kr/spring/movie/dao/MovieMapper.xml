<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper   
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">  
<mapper namespace="kr.spring.movie.dao.MovieMapper"><!--인터페이스명-자동매핑-->
	<!-- 글쓰기 -->
	 <insert id="insertMovie" parameterType="MovieVO">
	 	INSERT INTO movie(
	 		m_code,
	 		m_name,
	 		m_opendate,
	 		m_companys,
	 		m_status,
	 		m_filename,
	 		m_content
			)
	 		VALUES(
	 		movie_seq.nextval,
	 		#{m_name},
	 		#{m_opendate},
	 		#{m_companys},
	 		#{m_status},
	 		#{m_filename},
	 		#{m_content})
	 </insert>
	 
	 	 <!-- sql 태그와 include 태그를 이용해서 SQL문을 재사용 -->
	 <sql id="movieSearch"> <!-- 검색할 떄 -->
	 	<where>
	 		<if test="m_status != null and m_status != ''"> <!-- status가 있을 때 where절과 카테고리값 생성 -->
	 			m_status = #{m_status}
	 		</if>
	 		<if test="keyword !=null and keyword !=''">
	 			And
	 		</if>
	 		<if test="keyfield ==1">
	 			m_name LIKE '%' || #{keyword} || '%'
	 		</if>
	 		<if test="keyfield ==2">
	 			m_opendate LIKE '%' || #{keyword} || '%'
	 		</if>
	 		<if test="keyfield ==3">
	 			m_companys LIKE '%' || #{keyword} || '%'
	 		</if>

	 	</where>
	 </sql>
	 <sql id="movieOrder"> <!-- 정렬할 때 -->
	 	<if test="order ==1">
	 		ORDER BY m_code DESC
	 	</if>
	 	<if test="order ==2">
	 		ORDER BY bookmark_cnt DESC NULLS LAST
	 	</if>
	 	<if test="order ==3">
	 		ORDER BY m_opendate DESC NULLS LAST
	 	</if>
	 </sql>
	 
	 <!-- 게시판 글 총레코드 수/검색 레코드 수 -->
	 <select id="selectMovieRowCount" parameterType="map" resultType="integer">
	 	SELECT
	 		COUNT(*)
	 	FROM movie 
	 	<include refid="movieSearch"></include>
	 </select>
	 <!-- 게시판 전체 목록/검색 목록 -->
	 <select id="selectMovieList" parameterType="map" resultType="boardVO">
	 
	 
	 	SELECT
	 		*
	 	FROM (SELECT
	 			a.*,
	 			rownum rnum
	 		  FROM (SELECT
	 		  		  m_code,
	 		  		  <![CDATA[
	 		  		  REPLACE(REPLACE(m_name,'<','&lt;'),'>','&gt;') m_name,
	 		  		  ]]>  
	 		  		  m_filename,
	 		  		  m_opendate,
	 		  		  m_company,
	 		  		  m_status,
	 		  		  nick_name,
	 		  		  re_cnt,
	 		  		  fav_cnt
	 		  		FROM movie 
	 		  		LEFT OUTER JOIN (SELECT COUNT (*) bookmark_cnt, m_code FROM movie_bookmark GROUP BY m_code) USING(m_code) <!-- bookmark_cnt는 알리아스 명칭임 이 괄호는 인라인 뷰 -->
	 		  		JOIN member USING(mem_num)
	 		  		<include refid="movieSearch"></include>
	 		  		<include refid="movieOrder"></include>
	 		  		)a) 
	<![CDATA[
	WHERE rnum >= #{start} AND rnum <= #{end}
	]]>
	</select>
</mapper>							






